{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/jornlarsen/Desktop/vincere/app/components/SatchBlogComponent.tsx"],"sourcesContent":["// `components` object you'll pass to PortableText\nimport Link from \"next/link\";\n\n// `components` object you'll pass to PortableText\nexport const RichTextComponents: any = {\n  block: {\n    h1: ({ children }) => (\n      <h1 className='text-4xl font-bold my-4 whitespace-pre-line'>\n        {children}\n      </h1>\n    ),\n    h2: ({ children }) => (\n      <h2 className='text-3xl font-bold my-4 whitespace-pre-line'>\n        {children}\n      </h2>\n    ),\n    h3: ({ children }) => (\n      <h3 className='text-2xl font-bold my-4 whitespace-pre-line'>\n        {children}\n      </h3>\n    ),\n    blockquote: ({ children }) => (\n      <blockquote className='border-l-4 pl-4 my-4 italic text-gray-700 border-gray-300 whitespace-pre-line'>\n        {children}\n      </blockquote>\n    ),\n    ul: ({ children }) => (\n      <ul className='list-disc ml-8 my-4 whitespace-pre-line'>{children}</ul>\n    ),\n    ol: ({ children }) => (\n      <ol className='list-decimal ml-8 my-4 whitespace-pre-line'>{children}</ol>\n    ),\n    li: ({ children }) => (\n      <li className='mb-2 my-4 whitespace-pre-line'>{children}</li>\n    ),\n    p: ({ children }) => (\n      <p className='text-xl my-4 whitespace-pre-line'>{children}</p>\n    ),\n  },\n  marks: {\n    link: ({ children, value }) => {\n      const rel = !value.href.startsWith(\"/\")\n        ? \"noreferrer noopener\"\n        : undefined;\n      return (\n        <Link\n          href={value.href}\n          rel={rel}\n          className='text-blue-500 hover:text-blue-700 whitespace-pre-line'>\n          {children}\n        </Link>\n      );\n    },\n  },\n};\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;AAClD;;;AAGO,MAAM,qBAA0B;IACrC,OAAO;QACL,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BACX;;;;;;QAGL,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BACX;;;;;;QAGL,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BACX;;;;;;QAGL,YAAY,CAAC,EAAE,QAAQ,EAAE,iBACvB,8OAAC;gBAAW,WAAU;0BACnB;;;;;;QAGL,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BAA2C;;;;;;QAE3D,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BAA8C;;;;;;QAE9D,IAAI,CAAC,EAAE,QAAQ,EAAE,iBACf,8OAAC;gBAAG,WAAU;0BAAiC;;;;;;QAEjD,GAAG,CAAC,EAAE,QAAQ,EAAE,iBACd,8OAAC;gBAAE,WAAU;0BAAoC;;;;;;IAErD;IACA,OAAO;QACL,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE;YACxB,MAAM,MAAM,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,OAC/B,wBACA;YACJ,qBACE,8OAAC,4HAAA,CAAA,UAAI;gBACH,MAAM,MAAM,IAAI;gBAChB,KAAK;gBACL,WAAU;0BACT;;;;;;QAGP;IACF;AACF"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/jornlarsen/Desktop/vincere/app/%28site%29/%5Bslug%5D/page.tsx"],"sourcesContent":["import { RichTextComponents } from \"@/app/components/SatchBlogComponent\";\nimport { urlFor } from \"@/sanity/config/client-config\";\nimport { getPage } from \"@/sanity/sanity.utils\";\n// import { PortableText } from \"next-sanity\";\nimport { PortableText } from \"@portabletext/react\";\nimport Image from \"next/image\";\n\nexport default async function Page({ params }: any) {\n  const page: { title: string; content: unknown; image: unknown } =\n    (await getPage(params?.slug || \"\")) as unknown as {\n      title: string;\n      content: any;\n      image: unknown;\n    };\n  const imageLink = urlFor(page?.image || \"\")\n    .width(2000)\n    .height(2000)\n    .url();\n\n  return (\n    <div className=''>\n      <div className='-bg-blue-500 h-full flex flex-col'>\n        <h1 className='text-black text-5xl drop-shadow font-extrabold mx-auto'>\n          {page?.title}\n        </h1>\n        <div className=' py-2 relative rounded-lg md:w-full   -bg-blue'>\n          <Image\n            className='md:max-w-full md:p-0 rounded-lg'\n            src={imageLink}\n            alt=''\n            style={{ width: \"100%\", height: \"auto\" }} // optional\n            width={1000}\n            height={1000}\n          />\n        </div>\n      </div>\n      <div className='text-lg text-gray-700 mt-100 prose-lg prose-h2:max-w-[32ch] prose-h2:text-5xl whitespace-pre-line -bg-blue-200'>\n        <PortableText\n          value={(page?.content as any) || []}\n          components={RichTextComponents}\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAGA;AAFA,8CAA8C;AAC9C;;;;;;;AAGe,eAAe,KAAK,EAAE,MAAM,EAAO;IAChD,MAAM,OACH,MAAM,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,QAAQ;IAKjC,MAAM,YAAY,CAAA,GAAA,qIAAA,CAAA,SAAM,AAAD,EAAE,MAAM,SAAS,IACrC,KAAK,CAAC,MACN,MAAM,CAAC,MACP,GAAG;IAEN,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCACX,MAAM;;;;;;kCAET,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;4BACJ,WAAU;4BACV,KAAK;4BACL,KAAI;4BACJ,OAAO;gCAAE,OAAO;gCAAQ,QAAQ;4BAAO;4BACvC,OAAO;4BACP,QAAQ;;;;;;;;;;;;;;;;;0BAId,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,wKAAA,CAAA,eAAY;oBACX,OAAO,AAAC,MAAM,WAAmB,EAAE;oBACnC,YAAY,wIAAA,CAAA,qBAAkB;;;;;;;;;;;;;;;;;AAKxC"}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/asserters.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/sortMarksByOccurences.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/buildMarksTree.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/nestLists.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/spanToPlainText.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/toPlainText.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/toolkit/src/types.ts"],"sourcesContent":["import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\n\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan,\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject,\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      !node.markDefs ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param block - Block to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject,\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList,\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param span - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan,\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param node - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode,\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n","import type {PortableTextSpan, TypedObject} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[],\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U,\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>,\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children, markDefs = []} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text})),\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n","import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\n\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct',\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html',\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html',\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode,\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList,\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode,\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>,\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n","import {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\nimport type {ToolkitNestedPortableTextSpan} from './types'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n","import type {ArbitraryTypedObject, PortableTextBlock} from '@portabletext/types'\n\nimport {isPortableTextBlock, isPortableTextSpan} from './asserters'\n\nconst leadingSpace = /^\\s/\nconst trailingSpace = /\\s$/\n\n/**\n * Takes a Portable Text block (or an array of them) and returns the text value\n * of all the Portable Text span nodes. Adds whitespace when encountering inline,\n * non-span nodes to ensure text flow is optimal.\n *\n * Note that this only accounts for regular Portable Text blocks - any text inside\n * custom content types are not included in the output.\n *\n * @param block - Single block or an array of blocks to extract text from\n * @returns The plain-text content of the blocks\n */\nexport function toPlainText(\n  block: PortableTextBlock | ArbitraryTypedObject[] | PortableTextBlock[],\n): string {\n  const blocks = Array.isArray(block) ? block : [block]\n  let text = ''\n\n  blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) {\n      return\n    }\n\n    let pad = false\n    current.children.forEach((span) => {\n      if (isPortableTextSpan(span)) {\n        // If the previous element was a non-span, and we have no natural whitespace\n        // between the previous and the next span, insert it to give the spans some\n        // room to breathe. However, don't do so if this is the first span.\n        text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? ' ' : ''\n        text += span.text\n        pad = false\n      } else {\n        pad = true\n      }\n    })\n\n    if (index !== blocks.length - 1) {\n      text += '\\n\\n'\n    }\n  })\n\n  return text\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n} from '@portabletext/types'\n\n/**\n * List nesting mode for HTML, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_HTML = 'html'\n\n/**\n * List nesting mode for direct, nested lists, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_DIRECT = 'direct'\n\n/**\n * List nesting mode, see the {@link nestLists | `nestLists()` function}\n */\nexport type ToolkitListNestMode = 'html' | 'direct'\n\n/**\n * Toolkit-specific type representing a nested list\n *\n * See the `nestLists()` function for more info\n */\nexport type ToolkitPortableTextList = ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList\n\n/**\n * Toolkit-specific type representing a nested list in HTML mode, where deeper lists are nested\n * inside of the _list items_, eg `<ul><li>Some text<ul><li>Deeper</li></ul></li></ul>`\n */\nexport interface ToolkitPortableTextHtmlList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes will appear as children of the _list items_\n   */\n  mode: 'html'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - toolkit-specific list items which can themselves hold deeper lists\n   */\n  children: ToolkitPortableTextListItem[]\n}\n\n/**\n * Toolkit-specific type representing a nested list in \"direct\" mode, where deeper lists are nested\n * inside of the lists children, alongside other blocks.\n */\nexport interface ToolkitPortableTextDirectList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes can appear as direct children\n   */\n  mode: 'direct'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - either portable text list items, or another, deeper list\n   */\n  children: (PortableTextListItemBlock | ToolkitPortableTextDirectList)[]\n}\n\n/**\n * Toolkit-specific type representing a list item block, but where the children can be another list\n */\nexport interface ToolkitPortableTextListItem\n  extends PortableTextListItemBlock<\n    PortableTextMarkDefinition,\n    PortableTextSpan | ToolkitPortableTextList\n  > {}\n\n/**\n * Toolkit-specific type representing a text node, used when nesting spans.\n *\n * See the {@link buildMarksTree | `buildMarksTree()` function}\n */\nexport interface ToolkitTextNode {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@text'\n\n  /**\n   * The actual string value of the text node\n   */\n  text: string\n}\n\n/**\n * Toolkit-specific type representing a portable text span that can hold other spans.\n * In this type, each span only has a single mark, instead of an array of them.\n */\nexport interface ToolkitNestedPortableTextSpan<\n  M extends PortableTextMarkDefinition = PortableTextMarkDefinition,\n> {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@span'\n\n  /**\n   * Unique key for this span\n   */\n  _key?: string\n\n  /**\n   * Holds the value (definition) of the mark in the case of annotations.\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markDef?: M\n\n  /**\n   * The key of the mark definition (in the case of annotations).\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markKey?: string\n\n  /**\n   * Type of the mark. For annotations, this is the `_type` property of the value.\n   * For decorators, it will hold the name of the decorator (strong, em or similar).\n   */\n  markType: string\n\n  /**\n   * Child nodes of this span. Can be toolkit-specific text nodes, nested spans\n   * or any inline object type.\n   */\n  children: (\n    | ToolkitTextNode\n    | ToolkitNestedPortableTextSpan<PortableTextMarkDefinition>\n    | ArbitraryTypedObject\n  )[]\n}\n"],"names":["isPortableTextSpan","node","_type","text","marks","Array","isArray","every","mark","isPortableTextBlock","markDefs","def","_key","children","child","isPortableTextListItemBlock","block","listItem","level","isPortableTextToolkitList","isPortableTextToolkitSpan","span","isPortableTextToolkitTextNode","knownDecorators","sortMarksByOccurences","index","blockChildren","length","slice","occurences","forEach","siblingIndex","sibling","indexOf","sort","markA","markB","sortMarks","aOccurences","bOccurences","aKnownPos","bKnownPos","localeCompare","buildMarksTree","_a","sortedMarks","map","rootNode","markType","nodeStack","i","marksNeeded","pos","markKey","splice","currentNode","markDef","find","push","lines","split","line","concat","nestLists","blocks","mode","tree","currentList","listFromBlock","blockMatchesList","newList","lastListItem","newLastChild","_objectSpread","matchingBranch","match","findListMatching","console","warn","list","matching","style","filterOnType","spanToPlainText","current","leadingSpace","trailingSpace","toPlainText","pad","test","LIST_NEST_MODE_HTML","LIST_NEST_MODE_DIRECT"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6]}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/components/list.tsx","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/components/marks.tsx","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/warnings.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/components/unknown.tsx","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/components/defaults.tsx","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/components/merge.ts","file:///Users/jornlarsen/Desktop/vincere/node_modules/%40portabletext/react/src/react-portable-text.tsx"],"sourcesContent":["import type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => <ol>{children}</ol>,\n  bullet: ({children}) => <ul>{children}</ul>,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => <li>{children}</li>\n","import type {TypedObject} from '@portabletext/types'\n\nimport type {PortableTextMarkComponent} from '../types'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => (\n  <a href={value?.href}>{children}</a>\n)\n\nconst underlineStyle = {textDecoration: 'underline'}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  em: ({children}) => <em>{children}</em>,\n  strong: ({children}) => <strong>{children}</strong>,\n  code: ({children}) => <code>{children}</code>,\n  underline: ({children}) => <span style={underlineStyle}>{children}</span>,\n  'strike-through': ({children}) => <del>{children}</del>,\n  link,\n}\n","const getTemplate = (type: string, prop: string): string =>\n  `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n","import type {PortableTextReactComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nconst hidden = {display: 'none'}\n\nexport const DefaultUnknownType: PortableTextReactComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline ? <span style={hidden}>{warning}</span> : <div style={hidden}>{warning}</div>\n}\n\nexport const DefaultUnknownMark: PortableTextReactComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return <span className={`unknown__pt__mark__${markType}`}>{children}</span>\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextReactComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return <p>{children}</p>\n}\n\nexport const DefaultUnknownList: PortableTextReactComponents['unknownList'] = ({children}) => {\n  return <ul>{children}</ul>\n}\n\nexport const DefaultUnknownListItem: PortableTextReactComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return <li>{children}</li>\n}\n","import type {PortableTextBlockStyle} from '@portabletext/types'\n\nimport type {PortableTextBlockComponent, PortableTextReactComponents} from '../types'\nimport {DefaultListItem, defaultLists} from './list'\nimport {defaultMarks} from './marks'\nimport {\n  DefaultUnknownBlockStyle,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownMark,\n  DefaultUnknownType,\n} from './unknown'\n\nexport const DefaultHardBreak = (): JSX.Element => <br />\n\nexport const defaultBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => <p>{children}</p>,\n  blockquote: ({children}) => <blockquote>{children}</blockquote>,\n  h1: ({children}) => <h1>{children}</h1>,\n  h2: ({children}) => <h2>{children}</h2>,\n  h3: ({children}) => <h3>{children}</h3>,\n  h4: ({children}) => <h4>{children}</h4>,\n  h5: ({children}) => <h5>{children}</h5>,\n  h6: ({children}) => <h6>{children}</h6>,\n}\n\nexport const defaultComponents: PortableTextReactComponents = {\n  types: {},\n\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n","import type {PortableTextComponents, PortableTextReactComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents,\n): PortableTextReactComponents {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextReactComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextReactComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextReactComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextReactComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextReactComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types',\n): PortableTextReactComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextReactComponents[typeof key]\n  }\n\n  return parentVal\n}\n","import type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from '@portabletext/toolkit'\nimport {\n  buildMarksTree,\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  LIST_NEST_MODE_HTML,\n  nestLists,\n  spanToPlainText,\n} from '@portabletext/toolkit'\nimport type {\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport {type ReactNode, useMemo} from 'react'\n\nimport {defaultComponents} from './components/defaults'\nimport {mergeComponents} from './components/merge'\nimport type {\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextProps,\n  PortableTextReactComponents,\n  ReactPortableTextList,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function PortableText<B extends TypedObject = PortableTextBlock>({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning,\n}: PortableTextProps<B>): JSX.Element {\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(input) ? input : [input]\n  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML)\n\n  const components = useMemo(() => {\n    return componentOverrides\n      ? mergeComponents(defaultComponents, componentOverrides)\n      : defaultComponents\n  }, [componentOverrides])\n\n  const renderNode = useMemo(\n    () => getNodeRenderer(components, handleMissingComponent),\n    [components, handleMissingComponent],\n  )\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode}),\n  )\n\n  return <>{rendered}</>\n}\n\nconst getNodeRenderer = (\n  components: PortableTextReactComponents,\n  handleMissingComponent: MissingComponentHandler,\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): ReactNode {\n    const {node, index, isInline} = options\n    const key = node._key || `node-${index}`\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index, key)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index, key)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node, index, key)\n    }\n\n    if (hasCustomComponentForNode(node)) {\n      return renderCustomBlock(node, index, key, isInline)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, key, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node, key)\n    }\n\n    return renderUnknownType(node, index, key, isInline)\n  }\n\n  function hasCustomComponentForNode(node: TypedObject): boolean {\n    return node._type in components.types\n  }\n\n  /* eslint-disable react/jsx-no-bind */\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number,\n    key: string,\n  ) {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const Li = handler || components.unknownListItem\n\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block serializer says to use\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return (\n      <Li key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </Li>\n    )\n  }\n\n  function renderList(node: ReactPortableTextList, index: number, key: string) {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: childIndex,\n        isInline: false,\n        renderNode,\n      }),\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const List = handler || components.unknownList\n\n    if (List === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return (\n      <List key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </List>\n    )\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan, _index: number, key: string) {\n    const {markDef, markType, markKey} = node\n    const Span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode}),\n    )\n\n    if (Span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return (\n      <Span\n        key={key}\n        text={spanToPlainText(node)}\n        value={markDef}\n        markType={markType}\n        markKey={markKey}\n        renderNode={renderNode}\n      >\n        {children}\n      </Span>\n    )\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, key: string, isInline: boolean) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const Block = handler || components.unknownBlockStyle\n\n    if (Block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return <Block key={key} {...props} value={props.node} renderNode={renderNode} />\n  }\n\n  function renderText(node: ToolkitTextNode, key: string) {\n    if (node.text === '\\n') {\n      const HardBreak = components.hardBreak\n      return HardBreak ? <HardBreak key={key} /> : '\\n'\n    }\n\n    return node.text\n  }\n\n  function renderUnknownType(node: TypedObject, index: number, key: string, isInline: boolean) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode,\n    }\n\n    handleMissingComponent(unknownTypeWarning(node._type), {nodeType: 'block', type: node._type})\n\n    const UnknownType = components.unknownType\n    return <UnknownType key={key} {...nodeOptions} />\n  }\n\n  function renderCustomBlock(node: TypedObject, index: number, key: string, isInline: boolean) {\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode,\n    }\n\n    const Node = components.types[node._type]\n    return Node ? <Node key={key} {...nodeOptions} /> : null\n  }\n  /* eslint-enable react/jsx-no-bind */\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode}),\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n"],"names":["defaultLists","number","children","jsx","bullet","DefaultListItem","link","value","href","underlineStyle","textDecoration","defaultMarks","em","strong","code","underline","style","strike-through","getTemplate","type","prop","unknownTypeWarning","typeName","unknownMarkWarning","markType","unknownBlockStyleWarning","blockStyle","unknownListStyleWarning","listStyle","unknownListItemStyleWarning","printWarning","message","console","warn","hidden","display","DefaultUnknownType","isInline","warning","_type","DefaultUnknownMark","className","DefaultUnknownBlockStyle","DefaultUnknownList","DefaultUnknownListItem","DefaultHardBreak","defaultBlockStyles","normal","blockquote","h1","h2","h3","h4","h5","h6","defaultComponents","types","block","marks","list","listItem","hardBreak","unknownType","unknownMark","unknownList","unknownListItem","unknownBlockStyle","mergeComponents","parent","overrides","rest","_excluded","_objectSpread","mergeDeeply","key","override","parentVal","PortableText","input","components","componentOverrides","listNestingMode","onMissingComponent","missingComponentHandler","handleMissingComponent","noop","blocks","Array","isArray","nested","nestLists","LIST_NEST_MODE_HTML","useMemo","renderNode","getNodeRenderer","rendered","map","node","index","options","_key","isPortableTextToolkitList","renderList","isPortableTextListItemBlock","renderListItem","isPortableTextToolkitSpan","renderSpan","hasCustomComponentForNode","renderCustomBlock","isPortableTextBlock","renderBlock","isPortableTextToolkitTextNode","renderText","renderUnknownType","tree","serializeBlock","renderer","Li","nodeType","blockNode","_objectWithoutProperties","_excluded2","child","childIndex","component","List","_index","markDef","markKey","Span","text","spanToPlainText","_serializeBlock","props","_excluded3","Block","HardBreak","nodeOptions","UnknownType","Node","buildMarksTree","i"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6]}},
    {"offset": {"line": 834, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 840, "column": 0}, "map": {"version":3,"sources":["file:///Users/jornlarsen/Desktop/vincere/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAkBA,SAASE,IAAI,EAAEC,KAAK,GAAE;AALtB,yEAAyE;AAEzE,cAAc;AAdd,SAASH,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAyBxH,8BAA8B;IAI5BO,SAASC;;;;;;;;;IACTC,WAAWC,0DAAAA;AACb,EAAC,QAAA;AAED,MAAA,OAAA;IAAc;IAAA,iCAAoC;QAElD,YAAA;YAAA;YAAA,qCAA4D;gBAC5D,OAAO,KAAA;oBAAMC;oBAAAA,IAAc,IAAIX,mBAAmB;4BAChDY,QAAAA;4BAAAA,GAAY;4BAAA;iCACVC,MAAMZ,UAAUa,QAAQ;sCACxBC,IAAAA,CAAM,CAAA;gCAAA,QAAA;oCAAA,IAAA;oCAAA;iCAAA;;+BACNC,UAAU;;yBACV,2CAA2C;8BAC3CC,IAAAA,CAAAA;oBAAAA;iBAAAA,CAAY;;iBACZC,UAAU;sBACVC,IAAAA,CAAAA,GAAU;gBAAA,CAAE,SAAA;oBAAA,IAAA;oBAAA;iBAAA;kBACd,WAAA;oBAAA,IAAA;oBAAA;iBAAA;;WACAC,UAAU;;SACRC,YAAYnB;UACd,QAAA;YAAA,MAAA;gBACA,OAAA,QAAA;wBAAA","ignoreList":[0]}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}